---
import Clone from "@/layouts/Syntax/Clone";
import Header from "@/layouts/Syntax/Header.astro";
import Hero from "@/layouts/Syntax/Hero.astro";
import { Navigation } from "@/layouts/Syntax/Navigation";
import Prose from "@/layouts/Syntax/Prose.astro";
import { get, groupBy, omit, pick } from "lodash";
import path from "node:path";

import "@/styles/tailwind.css";

const { file, frontmatter, headings } = Astro.props;
const { title, description = "Tech Screen Starter" } = frontmatter;
const template = path.dirname(path.relative("src/pages", file));

function collectHeadings(nodes) {
  let sections = [];

  for (let node of nodes) {
    if (node.depth === 2 || node.depth === 3) {
      let title = node.text;
      if (title) {
        let id = node.slug;
        if (node.depth === 3) {
          if (!sections[sections.length - 1]) {
            throw new Error(
              "Cannot add `h3` to table of contents without a preceding `h2`"
            );
          }
          sections[sections.length - 1].children.push({
            id,
            title,
          });
        } else {
          sections.push({ id, title, children: [] });
        }
      }
    }

    sections.push(...collectHeadings(node.children ?? []));
  }

  return sections;
}

const pages = await Astro.glob("/src/pages/**/*.mdx");
const categories = groupBy(pages, "frontmatter.category");

const pageToNav = ({
  frontmatter: { title },
  url: href,
}: (typeof pages)[number]) => {
  console.log({ href });
  return {
    title,
    href: href || "/",
  };
};

const navigation = [
  // Prioritized nav
  ...Object.entries(pick(categories, "undefined")).map(([, pages]) => ({
    title: "Home",
    links: pages.map(pageToNav),
  })),
  ...Object.entries(omit(categories, "undefined"))
    .sort(([title1, title2]) => title1.localeCompare(title2))
    .map(([title, pages]) => ({
      title,
      links: pages.map(pageToNav),
    })),
  {
    title: "Documentation",
    links: [
      { title: "Astro", href: "https://docs.astro.build/en/getting-started/" },
      { title: "DaisyUI", href: "https://daisyui.com/components/" },
      { title: "MDN", href: "https://developer.mozilla.org/en-US/" },
      { title: "React", href: "https://beta.reactjs.org/reference/react" },
      { title: "Tailwind", href: "https://tailwindcss.com/docs/installation" },
      { title: "Vitest", href: "https://vitest.dev/api/" },
    ],
  },
];

const router = Astro.url;
const isHomePage = router.pathname === "/";
let allLinks = navigation.flatMap((section) => section.links);
let linkIndex = allLinks.findIndex((link) => link.href === router.pathname);
let previousPage = allLinks[linkIndex - 1];
let nextPage = allLinks[linkIndex + 1];
let section = navigation.find((section) =>
  section.links.find((link) => link.href === router.pathname)
);
let tableOfContents = collectHeadings(headings);
let currentSection = tableOfContents[0]?.id;

function isActive(section) {
  if (section.id === currentSection) {
    return true;
  }
  if (!section.children) {
    return false;
  }
  return section.children.findIndex(isActive) > -1;
}
---

<html class="antialiased [font-feature-settings:'ss01']" lang="en">
  <head>
    <title>{title}</title>
    {description && <meta name="description" content={description} />}

    <script is:inline>
      let isDarkMode = window.matchMedia("(prefers-color-scheme: dark)");

      function updateTheme(theme) {
        theme = theme ?? window.localStorage.theme ?? "system";

        if (theme === "dark" || (theme === "system" && isDarkMode.matches)) {
          document.documentElement.classList.add("dark");
        } else if (
          theme === "light" ||
          (theme === "system" && !isDarkMode.matches)
        ) {
          document.documentElement.classList.remove("dark");
        }

        return theme;
      }

      function updateThemeWithoutTransitions(theme) {
        updateTheme(theme);
        document.documentElement.classList.add("[&_*]:!transition-none");
        window.setTimeout(() => {
          document.documentElement.classList.remove("[&_*]:!transition-none");
        }, 0);
      }

      document.documentElement.setAttribute("data-theme", updateTheme());

      new MutationObserver(([{ oldValue }]) => {
        let newValue = document.documentElement.getAttribute("data-theme");
        if (newValue !== oldValue) {
          try {
            window.localStorage.setItem("theme", newValue);
          } catch {}
          updateThemeWithoutTransitions(newValue);
        }
      }).observe(document.documentElement, {
        attributeFilter: ["data-theme"],
        attributeOldValue: true,
      });

      isDarkMode.addEventListener("change", () =>
        updateThemeWithoutTransitions()
      );
    </script>
  </head>

  <body class="bg-white dark:bg-slate-900">
    <Header navigation={navigation} />

    {isHomePage && <Hero />}

    <div
      class="relative flex justify-center mx-auto max-w-8xl sm:px-2 lg:px-8 xl:px-12"
    >
      <div class="hidden lg:relative lg:block lg:flex-none">
        <div
          class="absolute inset-y-0 right-0 w-[50vw] bg-slate-50 dark:hidden"
        >
        </div>
        <div
          class="absolute bottom-0 right-0 hidden w-px h-12 top-16 bg-gradient-to-t from-slate-800 dark:block"
        >
        </div>
        <div
          class="absolute bottom-0 right-0 hidden w-px top-28 bg-slate-800 dark:block"
        >
        </div>
        <div
          class="sticky top-[4.5rem] -ml-0.5 h-[calc(100vh-4.5rem)] overflow-y-auto overflow-x-hidden py-16 pl-0.5"
        >
          <Navigation
            className="w-64 pr-8 xl:w-72 xl:pr-16"
            client:load
            navigation={navigation}
          />
        </div>
      </div>
      <div
        class="flex-auto max-w-2xl min-w-0 px-4 py-16 lg:max-w-none lg:pl-8 xl:px-16"
        id="top"
      >
        <article>
          {
            (title || section) && (
              <header class="space-y-1 mb-9">
                {section && (
                  <p class="text-sm font-medium font-display text-sky-500">
                    {section.title}
                  </p>
                )}
                <div class="flex justify-between items-center">
                  {title && (
                    <h1 class="text-3xl tracking-tight font-display text-slate-900 dark:text-white">
                      {title}
                    </h1>
                  )}

                  <Clone
                    client:only
                    defaultCategory={section?.title}
                    defaultTitle={`${title} Clone`}
                    template={template}
                  />
                </div>
              </header>
            )
          }
          <Prose>
            <slot />
          </Prose>
        </article>
        <dl
          class="flex pt-6 mt-12 border-t border-slate-200 dark:border-slate-800"
        >
          {
            previousPage && (
              <div>
                <dt class="text-sm font-medium font-display text-slate-900 dark:text-white">
                  Previous
                </dt>
                <dd class="mt-1">
                  <a
                    href={previousPage.href}
                    class="text-base font-semibold text-slate-500 hover:text-slate-600 dark:text-slate-400 dark:hover:text-slate-300"
                  >
                    <span aria-hidden="true">&larr;</span> {previousPage.title}
                  </a>
                </dd>
              </div>
            )
          }
          {
            nextPage && (
              <div class="ml-auto text-right">
                <dt class="text-sm font-medium font-display text-slate-900 dark:text-white">
                  Next
                </dt>
                <dd class="mt-1">
                  <a
                    href={nextPage.href}
                    class="text-base font-semibold text-slate-500 hover:text-slate-600 dark:text-slate-400 dark:hover:text-slate-300"
                  >
                    {nextPage.title} <span aria-hidden="true">&rarr;</span>
                  </a>
                </dd>
              </div>
            )
          }
        </dl>
      </div>
      <div
        class="hidden md:sticky md:top-[4.5rem] md:-mr-6 md:block md:h-[calc(100vh-4.5rem)] md:flex-none md:overflow-y-auto md:py-16 md:pr-6"
      >
        <nav aria-labelledby="on-this-page-title" class="w-48">
          {
            tableOfContents.length > 0 && (
              <>
                <h2
                  id="on-this-page-title"
                  class="text-sm font-medium font-display text-slate-900 dark:text-white"
                >
                  On this page
                </h2>
                <ol role="list" class="mt-4 space-y-3 text-sm">
                  {tableOfContents.map((section) => (
                    <li>
                      <h3>
                        <a
                          href={`#${section.id}`}
                          class:list={[
                            isActive(section)
                              ? "text-sky-500"
                              : "font-normal text-slate-500 hover:text-slate-700 dark:text-slate-400 dark:hover:text-slate-300",
                          ]}
                        >
                          {section.title}
                        </a>
                      </h3>
                      {section.children.length > 0 && (
                        <ol
                          role="list"
                          class="pl-5 mt-2 space-y-3 text-slate-500 dark:text-slate-400"
                        >
                          {section.children.map((subSection) => (
                            <li>
                              <a
                                href={`#${subSection.id}`}
                                class={
                                  isActive(subSection)
                                    ? "text-sky-500"
                                    : "hover:text-slate-600 dark:hover:text-slate-300"
                                }
                              >
                                {subSection.title}
                              </a>
                            </li>
                          ))}
                        </ol>
                      )}
                    </li>
                  ))}
                </ol>
              </>
            )
          }
        </nav>
      </div>
    </div>
  </body>
</html>
